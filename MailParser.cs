using Google.Apis.Calendar.v3.Data;
using Google.Apis.Gmail.v1.Data;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;

namespace workschedule
{
    public class MailParser
    {
        private readonly Event.ExtendedPropertiesData
            _eventProperties =
                new Event.ExtendedPropertiesData
                {
                    Private__ = new Dictionary<string, string> {{"AutoGenerated", "true"}}
                };

        private readonly Regex _regex;

        public MailParser(Regex regex)
        {
            _regex = regex;
            Summary = "Work";
            ColorId = "1";
        }

        public string DateFormat { get; set; }

        public string Summary { get; set; }

        public string ColorId { get; set; }

        public Log Log { private get; set; }

        public IEnumerable<Event> ParseMessage(Message msg)
        {
            Log.WriteAsync(Log.EventType.Info,
                $"Parsing message {msg.Id}...");
            foreach (Match match in _regex.Matches(
                ConvertPayloadBody(msg)))
                yield return ParseMessageInternal(match);
        }

        private Event ParseMessageInternal(Match match)
        {
            if (!DateTime.TryParseExact(
                    $"{match.Groups["date"]} {match.Groups["in"]}",
                    DateFormat, null,
                    DateTimeStyles.None, out var start) ||
                !DateTime.TryParseExact(
                    $"{match.Groups["date"]} {match.Groups["out"]}",
                    DateFormat, null,
                    DateTimeStyles.None, out var end))
            {
                Log.WriteAsync(Log.EventType.Error,
                    "Error parsing DateTime.",
                    $"Match: {match.Value}",
                    $"Format: {DateFormat}");
                throw new InvalidOperationException(
                    "Error parsing DateTime.");
            }

            Log.WriteAsync(Log.EventType.Info,
                "Date parsed successfully.");

            if (DateTime.Now.Month == 12 &&
                start.Month == 1)
            {
                Log.WriteAsync(Log.EventType.Info,
                    "Adjusting year of parsed date.");
                start = start.AddYears(1);
                end = end.AddYears(1);
            }

            return new Event
            {
                Summary = Summary,
                ColorId = ColorId,
                ExtendedProperties = _eventProperties,
                Start = new EventDateTime
                {
                    DateTime = start
                },
                End = new EventDateTime
                {
                    DateTime = end
                }
            };
        }

        private static string ConvertPayloadBody(
            Message msg)
        {
            return Encoding.UTF8.GetString(
                Convert.FromBase64String(
                    msg.Payload.Body.Data
                        .Replace('-', '+')));
        }
    }
}